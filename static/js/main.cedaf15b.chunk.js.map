{"version":3,"sources":["components/Header.js","components/Courses.js","bin/auth.js","components/DeleteCourse.js","components/CourseDetail.js","components/ValidationErrors.js","components/UpdateCourse.js","components/CreateCourse.js","components/UserSignUp.js","components/UserSignIn.js","components/UserSignOut.js","components/PrivateRoute.js","components/NotFound.js","components/Forbidden.js","components/UnhandledError.js","App.js","serviceWorker.js","index.js"],"names":["Header","loginForm","user","emailAddress","firstName","lastName","className","to","Courses","state","courseComponents","addCourseButton","props","authenticated","version","xmlns","x","y","viewBox","points","axios","get","this","serverLocation","courses","data","map","course","key","id","title","setState","history","push","Component","withRouter","getAuthHeaders","password","Authorization","base64","encode","authSignUp","form","a","post","status","errors","response","authSignIn","headers","DeleteCourse","redirect","courseId","match","params","getResponse","userId","User","method","url","CourseDetails","Object","keys","length","isUserOwner","source","description","estimatedTime","materialsNeeded","ValidationErrors","errorMessages","error","index","require","UpdateCourse","validationErrors","onChange","e","target","name","value","cancelForm","submitForm","preventDefault","saveCourse","forEach","onSubmit","type","placeholder","onClick","CreateCourse","UserSignUp","onCancel","confirmPassword","toLowerCase","userSignUp","UserSignIn","redirectPath","userSignIn","from","location","pathname","UserSignOut","cookies","userSignOut","remove","path","PrivateRoute","RenderComponent","render","rest","NotFound","Forbidden","UnhandledError","Cookies","App","signUp","result","signIn","set","signOut","purpose","message","exact","CourseDetail","component","Boolean","window","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.cedaf15b.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Header = ({ user }) => {\n  let loginForm;\n  // if user is not logged in\n  if (!user.emailAddress) {\n    loginForm = (\n      <nav>\n        <Link className=\"signup\" to=\"/signup\">\n          Sign Up\n        </Link>\n        <Link className=\"signin\" to=\"/signin\">\n          Sign In\n        </Link>\n      </nav>\n    );\n  } else {\n    // if user is logged in\n    loginForm = (\n      <nav>\n        <span>\n          Welcome {user.firstName} {user.lastName}!\n        </span>\n        <Link className=\"signout\" to=\"/signout\">\n          Sign Out\n        </Link>\n      </nav>\n    );\n  }\n  return (\n    <div className=\"header\">\n      <div className=\"bounds\">\n        <h1 className=\"header--logo\">\n          <Link to=\"/\">Courses</Link>\n        </h1>\n        {loginForm}\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport axios from \"axios\";\n\nclass Courses extends Component {\n  state = {\n    courseComponents: [],\n  };\n\n  async componentDidMount() {\n    try {\n      // get course list\n      const courses = await axios.get(\n        `${this.props.serverLocation}/api/courses`\n      );\n\n      // map courses to a list\n      const courseComponents = courses.data.map((course) => (\n        <div className=\"grid-33\" key={course.id}>\n          <Link\n            className=\"course--module course--link\"\n            to={`/courses/${course.id}`}\n          >\n            <h4 className=\"course--label\">Course</h4>\n            <h3 className=\"course--title\">{course.title}</h3>\n          </Link>\n        </div>\n      ));\n\n      // save courses in state\n      this.setState(() => ({ courseComponents }));\n    } catch {\n      this.props.history.push(\"/error\");\n    }\n  }\n\n  // give the user the ability to create a course\n  addCourseButton = () => {\n    // only give the option to add a course if the user is signed in\n    if (this.props.user.authenticated) {\n      return (\n        <div className=\"grid-33\">\n          <Link\n            className=\"course--module course--add--module\"\n            to=\"/courses/create\"\n          >\n            <h3 className=\"course--add--title\">\n              <svg\n                version=\"1.1\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                x=\"0px\"\n                y=\"0px\"\n                viewBox=\"0 0 13 13\"\n                className=\"add\"\n              >\n                <polygon points=\"7,6 7,0 6,0 6,6 0,6 0,7 6,7 6,13 7,13 7,7 13,7 13,6 \"></polygon>\n              </svg>\n              New Course\n            </h3>\n          </Link>\n        </div>\n      );\n    } else {\n      return <div></div>;\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"bounds\">\n        {this.state.courseComponents}\n        {this.addCourseButton()}\n      </div>\n    );\n  }\n}\n\nexport default withRouter(Courses);\n","import base64 from \"base-64\";\nimport axios from \"axios\";\n// import Cookies from \"universal-cookie\";\n\n// const cookies = new Cookies();\n\n/**\n * helper function to create the auth headers for use in axios requests\n * @param {string} emailAddress\n * @param {string} password\n */\nconst getAuthHeaders = (emailAddress, password) => {\n  return {\n    Authorization: `Basic ${base64.encode(`${emailAddress}:${password}`)}`,\n  };\n};\n\n/**\n * send credentials to the database to sign up a user\n * sets state with\n * @param {object} form - user sign-up form\n * @return {object} signed-up user\n */\nconst authSignUp = async (form, serverLocation) => {\n  try {\n    await axios.post(`${serverLocation}/api/users`, {\n      ...form,\n    });\n    return {\n      user: {\n        authenticated: true,\n        emailAddress: form.emailAddress,\n        password: form.password,\n        firstName: form.firstName,\n        lastName: form.lastName,\n      },\n    };\n  } catch (e) {\n    return {\n      status: 400,\n      errors: e.response.data.errors,\n    };\n  }\n};\n\n/**\n * authenticates user credentials with server\n * if favorable response, sets user in state & cookies\n * @param {object} form - user sign-in form\n * @param {string} serverLocation - url to access the server\n * @return {object} authenticated user\n */\nconst authSignIn = async (form, serverLocation) => {\n  const { emailAddress, password } = form;\n  try {\n    const response = await axios.get(`${serverLocation}/api/users`, {\n      headers: getAuthHeaders(emailAddress, password),\n    });\n\n    if (response.status === 200) {\n      response.data.user.password = password;\n      response.data.user.authenticated = true;\n      return { user: response.data.user };\n    }\n  } catch (error) {\n    return false;\n  }\n};\n\nexport { getAuthHeaders, authSignUp, authSignIn };\n","import { Component } from \"react\";\nimport axios from \"axios\";\nimport { withRouter } from \"react-router-dom\";\n\nimport { getAuthHeaders } from \"../bin/auth\";\n\nclass DeleteCourse extends Component {\n  state = {\n    redirect: true,\n  };\n\n  async componentDidMount() {\n    const { courseId } = this.props.match.params;\n    const { user } = this.props;\n\n    try {\n      // get course to delete\n      const getResponse = await axios.get(\n        `${this.props.serverLocation}/api/courses/${courseId}`\n      );\n      if (getResponse.status !== 404) {\n        // if course exists\n        const course = getResponse.data;\n\n        // if user owns course\n        if (this.props.user.userId === course.User.id) {\n          // attempt deleting the course\n          await axios({\n            method: \"delete\",\n            url: `${this.props.serverLocation}/api/courses/${courseId}`,\n            headers: getAuthHeaders(user.emailAddress, user.password),\n          });\n          // course successfully deleted\n          this.props.history.push(\"/courses\");\n        }\n      }\n    } catch {\n      this.props.history.push(\"/error\");\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n\nexport default withRouter(DeleteCourse);\n","import React, { Component } from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport ReactMarkdown from \"react-markdown\";\nimport axios from \"axios\";\n\nclass CourseDetails extends Component {\n  state = {\n    course: {},\n  };\n\n  async componentDidMount() {\n    const { courseId } = this.props.match.params;\n    try {\n      const { data } = await axios.get(\n        `${this.props.serverLocation}/api/courses/${courseId}`\n      );\n      this.setState({ course: data });\n    } catch {\n      // error fetching course, probably 404\n      this.props.history.push(\"/notfound\");\n    }\n  }\n\n  /**\n   * determine if user owns the current course to show the update/delete buttons\n   */\n  isUserOwner() {\n    try {\n      const user = this.state.course.User;\n\n      const authenticatedUser = this.props.user.userId;\n      const ownerUser = user.id;\n      if (authenticatedUser === ownerUser) {\n        return (\n          <span>\n            <Link\n              className=\"button\"\n              to={`/courses/${this.state.course.id}/update`}\n            >\n              Update Course\n            </Link>\n            <Link\n              className=\"button\"\n              to={`/courses/${this.state.course.id}/delete`}\n            >\n              Delete Course\n            </Link>\n          </span>\n        );\n      } else {\n        return <span></span>;\n      }\n    } catch {\n      return <span></span>;\n    }\n  }\n\n  render() {\n    const course = this.state.course;\n    if (Object.keys(course).length > 0) {\n      return (\n        <div>\n          <div className=\"actions--bar\">\n            <div className=\"bounds\">\n              <div className=\"grid-100\">\n                {this.isUserOwner()}\n                <Link className=\"button button-secondary\" to=\"/\">\n                  Return to List\n                </Link>\n              </div>\n            </div>\n          </div>\n          <div className=\"bounds course--detail\">\n            <div className=\"grid-66\">\n              <div className=\"course--header\">\n                <h4 className=\"course--label\">Course</h4>\n                <h3 className=\"course--title\">{course.title}</h3>\n                <p>\n                  By {course.User.firstName} {course.User.lastName}\n                </p>\n              </div>\n              <div className=\"course--description\">\n                <ReactMarkdown source={course.description} />\n              </div>\n            </div>\n            <div className=\"grid-25 grid-right\">\n              <div className=\"course--stats\">\n                <ul className=\"course--stats--list\">\n                  {/* only show estimated time if it has been specified */}\n                  {(() => {\n                    if (course.estimatedTime) {\n                      return (\n                        <li className=\"course--stats--list--item\">\n                          <h4>Estimated Time</h4>\n                          <h3>{course.estimatedTime}</h3>\n                        </li>\n                      );\n                    }\n                  })()}\n\n                  {/* only show materials needed if they have been specified */}\n                  {(() => {\n                    if (course.materialsNeeded) {\n                      return (\n                        <li className=\"course--stats--list--item\">\n                          <h4>Materials Needed</h4>\n                          <ReactMarkdown source={course.materialsNeeded} />\n                        </li>\n                      );\n                    }\n                  })()}\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n    } else {\n      return <div></div>;\n    }\n  }\n}\n\nexport default withRouter(CourseDetails);\n","import React from \"react\";\n\n/**\n * displays list of validation errors\n * @param {array} param0 error messages to display\n */\nexport default function ValidationErrors({ errors }) {\n  if (errors) {\n    const errorMessages = errors.map((error, index) => {\n      return <li key={index}>{error}</li>;\n    });\n    return (\n      <div className=\"validation-errors\">\n        <ul>{errorMessages}</ul>\n      </div>\n    );\n  } else {\n    return <div></div>;\n  }\n}\n","import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport ValidationErrors from \"./ValidationErrors\";\n\nconst axios = require(\"axios\");\n\nclass UpdateCourse extends Component {\n  state = {\n    validationErrors: [],\n    course: {\n      title: \"\",\n      description: \"\",\n      estimatedTime: \"\",\n      materialsNeeded: \"\",\n    },\n    user: {\n      firstName: \"\",\n      lastName: \"\",\n      id: \"\",\n      emailAddress: \"\",\n    },\n  };\n\n  async componentDidMount() {\n    // download current course\n    const { courseId } = this.props.match.params;\n    try {\n      const course = await axios.get(\n        `${this.props.serverLocation}/api/courses/${courseId}`\n      );\n\n      // replace any null values with empty strings\n      Object.keys(course.data).forEach((key) => {\n        course.data[key] = course.data[key] || \"\";\n      });\n\n      this.setState({ course: course.data });\n      this.setState({ user: course.data.User });\n\n      // check if auth'd user owns this course\n      if (this.props.user.userId !== this.state.user.id) {\n        // if not, redirect home\n        this.props.history.push(\"/\");\n      }\n    } catch {\n      //error fetching course from server (probably 404)\n      this.props.history.push(\"/notfound\");\n    }\n  }\n\n  // update state to reflect form\n  onChange = (e) => {\n    const course = this.state.course;\n    course[e.target.name] = e.target.value;\n    this.setState({ course });\n  };\n\n  cancelForm = () => {\n    const url = `/courses/${this.state.course.id}`;\n    this.props.history.push(url);\n  };\n\n  submitForm = async (e) => {\n    e.preventDefault();\n    const response = await this.props.saveCourse(this.state.course, \"update\");\n    if (response.status === 200) {\n      this.props.history.push(`/courses/${response.data.id}`);\n    } else {\n      this.setState({\n        validationErrors: response.errors,\n      });\n    }\n  };\n\n  render() {\n    const { course } = this.state;\n    const user = this.state.user || {};\n    return (\n      <div className=\"bounds course--detail\">\n        <h1>Update Course</h1>\n        <div>\n          <ValidationErrors errors={this.state.validationErrors} />\n          <form onSubmit={this.submitForm}>\n            <div className=\"grid-66\">\n              <div className=\"course--header\">\n                <h4 className=\"course--label\">Course</h4>\n                <div>\n                  <input\n                    id=\"title\"\n                    name=\"title\"\n                    type=\"text\"\n                    className=\"input-title course--title--input\"\n                    placeholder=\"Course title (required)\"\n                    value={course.title}\n                    onChange={this.onChange}\n                  />\n                </div>\n                <p>\n                  By {user.firstName} {user.lastName}\n                </p>\n              </div>\n              <div className=\"course--description\">\n                <div>\n                  <textarea\n                    id=\"description\"\n                    name=\"description\"\n                    className=\"\"\n                    placeholder=\"Course description (required)\"\n                    onChange={this.onChange}\n                    value={course.description}\n                  />\n                </div>\n              </div>\n            </div>\n            <div className=\"grid-25 grid-right\">\n              <div className=\"course--stats\">\n                <ul className=\"course--stats--list\">\n                  <li className=\"course--stats--list--item\">\n                    <h4>Estimated Time</h4>\n                    <div>\n                      <input\n                        id=\"estimatedTime\"\n                        name=\"estimatedTime\"\n                        type=\"text\"\n                        className=\"course--time--input\"\n                        placeholder=\"Hours\"\n                        value={course.estimatedTime}\n                        onChange={this.onChange}\n                      />\n                    </div>\n                  </li>\n                  <li className=\"course--stats--list--item\">\n                    <h4>Materials Needed</h4>\n                    <div>\n                      <textarea\n                        id=\"materialsNeeded\"\n                        name=\"materialsNeeded\"\n                        className=\"\"\n                        placeholder=\"List materials...\"\n                        value={course.materialsNeeded}\n                        onChange={this.onChange}\n                      ></textarea>\n                    </div>\n                  </li>\n                </ul>\n              </div>\n            </div>\n            <div className=\"grid-100 pad-bottom\">\n              <button className=\"button\" type=\"submit\">\n                Update Course\n              </button>\n              <button\n                className=\"button button-secondary\"\n                onClick={this.cancelForm}\n              >\n                Cancel\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(UpdateCourse);\n","import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport ValidationErrors from \"./ValidationErrors\";\n\nclass CreateCourse extends Component {\n  state = {\n    validationErrors: [],\n    course: {\n      title: \"\",\n      description: \"\",\n      estimatedTime: \"\",\n      materialsNeeded: \"\",\n    },\n    user: {\n      firstName: \"\",\n      lastName: \"\",\n      id: \"\",\n      emailAddress: \"\",\n    },\n  };\n\n  componentDidMount() {\n    this.setState({ user: this.props.user });\n  }\n\n  // update state to reflect form\n  onChange = (e) => {\n    const course = this.state.course;\n    course[e.target.name] = e.target.value;\n    this.setState({ course });\n  };\n\n  cancelForm = () => {\n    this.props.history.push(\"/courses\");\n  };\n\n  submitForm = async (e) => {\n    e.preventDefault();\n    const response = await this.props.saveCourse(this.state.course, \"create\");\n    if (response.status === 200) {\n      this.props.history.push(`/courses/${response.data.id}`);\n    } else {\n      this.setState({\n        validationErrors: response.errors,\n      });\n    }\n  };\n\n  render() {\n    const { course } = this.state;\n    const user = this.state.user || {};\n    return (\n      <div className=\"bounds course--detail\">\n        <h1>Create Course</h1>\n        <div>\n          <ValidationErrors errors={this.state.validationErrors} />\n          <form onSubmit={this.submitForm}>\n            <div className=\"grid-66\">\n              <div className=\"course--header\">\n                <h4 className=\"course--label\">Course</h4>\n                <div>\n                  <input\n                    id=\"title\"\n                    name=\"title\"\n                    type=\"text\"\n                    className=\"input-title course--title--input\"\n                    placeholder=\"Course title (required)\"\n                    value={course.title}\n                    onChange={this.onChange}\n                  />\n                </div>\n                <p>\n                  By {user.firstName} {user.lastName}\n                </p>\n              </div>\n              <div className=\"course--description\">\n                <div>\n                  <textarea\n                    id=\"description\"\n                    name=\"description\"\n                    className=\"\"\n                    placeholder=\"Course description (required)\"\n                    onChange={this.onChange}\n                    value={course.description}\n                  />\n                </div>\n              </div>\n            </div>\n            <div className=\"grid-25 grid-right\">\n              <div className=\"course--stats\">\n                <ul className=\"course--stats--list\">\n                  <li className=\"course--stats--list--item\">\n                    <h4>Estimated Time</h4>\n                    <div>\n                      <input\n                        id=\"estimatedTime\"\n                        name=\"estimatedTime\"\n                        type=\"text\"\n                        className=\"course--time--input\"\n                        placeholder=\"Hours\"\n                        value={course.estimatedTime}\n                        onChange={this.onChange}\n                      />\n                    </div>\n                  </li>\n                  <li className=\"course--stats--list--item\">\n                    <h4>Materials Needed</h4>\n                    <div>\n                      <textarea\n                        id=\"materialsNeeded\"\n                        name=\"materialsNeeded\"\n                        className=\"\"\n                        placeholder=\"List materials...\"\n                        value={course.materialsNeeded}\n                        onChange={this.onChange}\n                      ></textarea>\n                    </div>\n                  </li>\n                </ul>\n              </div>\n            </div>\n            <div className=\"grid-100 pad-bottom\">\n              <button className=\"button\" type=\"submit\">\n                Create Course\n              </button>\n              <button\n                className=\"button button-secondary\"\n                onClick={this.cancelForm}\n              >\n                Cancel\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(CreateCourse);\n","import React, { Component } from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport ValidationErrors from \"./ValidationErrors\";\n\nclass UserSignUp extends Component {\n  state = {\n    validationErrors: [],\n    form: {\n      firstName: \"\",\n      lastName: \"\",\n      emailAddress: \"\",\n      password: \"\",\n    },\n  };\n\n  onChange = (e) => {\n    const form = this.state.form;\n    form[e.target.name] = e.target.value;\n    this.setState({ form });\n  };\n\n  onCancel = () => {\n    this.props.history.push(\"/courses\");\n  };\n\n  submitForm = async (e) => {\n    e.preventDefault();\n    const { form } = this.state;\n\n    //delete current form validation errors\n    this.setState({ validationErrors: [] });\n\n    let validationErrors = [];\n\n    // check that password was correctly entered twice\n    if (form.password !== form.confirmPassword) {\n      validationErrors.push(\"Passwords do not match\");\n    }\n\n    //clean up email\n    form.emailAddress = form.emailAddress.toLowerCase();\n\n    const response = await this.props.userSignUp(form);\n    if (response.status === 400) {\n      validationErrors = [...validationErrors, ...response.errors];\n      this.setState({\n        validationErrors: response.errors,\n      });\n    } else {\n      //redirect to main page\n      this.props.history.push(\"/courses\");\n    }\n  };\n\n  render() {\n    const { form } = this.state;\n    return (\n      <div className=\"bounds\">\n        <div className=\"grid-33 centered signin\">\n          <h1>Sign Up</h1>\n          <ValidationErrors errors={this.state.validationErrors} />\n          <div>\n            <p>*All fields required</p>\n            <form onSubmit={this.submitForm}>\n              <div>\n                <input\n                  id=\"firstName\"\n                  name=\"firstName\"\n                  type=\"text\"\n                  className=\"\"\n                  placeholder=\"First Name\"\n                  onChange={this.onChange}\n                  value={form.firstName}\n                />\n              </div>\n              <div>\n                <input\n                  id=\"lastName\"\n                  name=\"lastName\"\n                  type=\"text\"\n                  className=\"\"\n                  placeholder=\"Last Name\"\n                  onChange={this.onChange}\n                  value={form.lastName}\n                />\n              </div>\n              <div>\n                <input\n                  id=\"emailAddress\"\n                  name=\"emailAddress\"\n                  type=\"text\"\n                  className=\"\"\n                  placeholder=\"Email Address\"\n                  onChange={this.onChange}\n                  value={form.emailAddress}\n                />\n              </div>\n              <div>\n                <input\n                  id=\"password\"\n                  name=\"password\"\n                  type=\"password\"\n                  className=\"\"\n                  placeholder=\"Password\"\n                  onChange={this.onChange}\n                  value={form.password}\n                />\n              </div>\n              <div className=\"grid-100 pad-bottom\">\n                <button className=\"button\" type=\"submit\">\n                  Sign Up\n                </button>\n                <button\n                  className=\"button button-secondary\"\n                  onClick={this.onCancel}\n                >\n                  Cancel\n                </button>\n              </div>\n            </form>\n          </div>\n          <p>&nbsp;</p>\n          <p>\n            Already have a user account? <Link to=\"/signin\">Click here</Link> to\n            sign in!\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(UserSignUp);\n","import React, { Component } from \"react\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport ValidationErrors from \"./ValidationErrors\";\n\nexport default class UserSignIn extends Component {\n  state = {\n    user: {\n      emailAddress: \"\",\n      password: \"\",\n    },\n    validationErrors: [],\n    redirectPath: \"\",\n  };\n\n  onChange = (e) => {\n    //update state to reflect form\n    const { user } = this.state;\n    user[e.target.name] = e.target.value;\n    this.setState({ user });\n  };\n\n  onCancel = () => {\n    this.props.history.push(\"/\");\n  };\n\n  submitForm = async (e) => {\n    e.preventDefault();\n    //attempt sign-in\n    const response = await this.props.userSignIn(this.state.user);\n    if (response === true) {\n      // if a protected route was previously attempted, redirect to it now\n      // otherwise redirect to '/courses'\n      let from;\n      try {\n        from = this.props.location.state.from.pathname;\n      } catch {\n        from = \"/\";\n      }\n      this.props.history.push(from);\n    } else {\n      this.setState({ validationErrors: [\"Email or password incorrect\"] });\n    }\n  };\n\n  render() {\n    const { user } = this.state;\n    if (this.props.user.authenticated) {\n      return <Redirect to=\"/courses\" />;\n    } else {\n      return (\n        <div className=\"bounds\">\n          <div className=\"grid-33 centered signin\">\n            <h1>Sign In</h1>\n            <div>\n              <ValidationErrors errors={this.state.validationErrors} />\n              <form onSubmit={this.submitForm}>\n                <div>\n                  <input\n                    id=\"emailAddress\"\n                    name=\"emailAddress\"\n                    type=\"text\"\n                    className=\"\"\n                    placeholder=\"Email Address\"\n                    value={user.emailAddress}\n                    onChange={this.onChange}\n                  />\n                </div>\n                <div>\n                  <input\n                    id=\"password\"\n                    name=\"password\"\n                    type=\"password\"\n                    className=\"\"\n                    placeholder=\"Password\"\n                    value={user.password}\n                    onChange={this.onChange}\n                  />\n                </div>\n                <div className=\"grid-100 pad-bottom\">\n                  <button className=\"button\" type=\"submit\">\n                    Sign In\n                  </button>\n                  <button\n                    className=\"button button-secondary\"\n                    onClick={this.onCancel}\n                  >\n                    Cancel\n                  </button>\n                </div>\n              </form>\n            </div>\n            <p>&nbsp;</p>\n            <p>\n              Don't have a user account? <Link to=\"/signup\">Click here</Link> to\n              sign up!\n            </p>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n","import React from 'react';\nimport { Redirect } from 'react-router-dom';\n\n\nexport default function UserSignOut(props) {\n  const { cookies, userSignOut } = props;\n  cookies.remove('emailAddress', { path: '/' });\n  cookies.remove('password', { path: '/' });\n  userSignOut();\n  return (\n    <Redirect to=\"/\" />\n  )\n}","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\n/**\n * allows access to private routes only if the user is authenticated\n */\nconst PrivateRoute = ({ render: RenderComponent, user, ...rest }) => (\n  <Route\n    {...rest}\n    render={(props) => {\n      user = user || {};\n      if (user.authenticated) {\n        props.user = user; //pass authenticated user down to component\n        return <RenderComponent {...props} />;\n      } else {\n        return (\n          <Redirect\n            to={{\n              pathname: \"/forbidden\",\n              state: { from: props.location }, // pass attempted path\n            }}\n          />\n        );\n      }\n    }}\n  />\n);\n\nexport default PrivateRoute;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\n/**\n * display user-friendly message for 404\n */\nexport default function NotFound() {\n  return (\n    <div className=\"not-found\">\n      <h1>Sorry, this page wasn't found</h1>\n      <Link className=\"button\" to=\"/courses\">\n        {\"<— Go back home\"}\n      </Link>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\n/**\n * display user-friendly error message for forbidden path\n */\nexport default function Forbidden(props) {\n  let from;\n  if (props.location.state) {\n    from = props.location.state.from;\n  } else {\n    from = \"/\";\n  }\n\n  return (\n    <div className=\"not-found\">\n      <h1>To access this page, you must sign in</h1>\n      <Link\n        className=\"button\"\n        to={{\n          pathname: \"/signin\",\n          state: { from },\n        }}\n      >\n        Go sign in\n      </Link>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\n/**\n * displays user-friendly message for unhandled errors\n */\nexport default function UnhandledError() {\n  return (\n    <div className=\"not-found\">\n      <h1>500 Server Error</h1>\n      <Link className=\"button\" to=\"/courses\">\n        {\"<— Go back home\"}\n      </Link>\n    </div>\n  );\n}\n","/* Coded by James Hall\n * as part of the TeamTreehouse Full Stack JS final project\n * Apr 27, 2020\n */\n\nimport React, { Component } from \"react\";\n\nimport axios from \"axios\";\nimport Cookies from \"universal-cookie\";\n\nimport \"./global.css\";\n\nimport { HashRouter, Route, Switch, Redirect } from \"react-router-dom\";\n\n// Import components\nimport Header from \"./components/Header\";\n\nimport Courses from \"./components/Courses\";\nimport DeleteCourse from \"./components/DeleteCourse\";\nimport CourseDetails from \"./components/CourseDetail\";\nimport UpdateCourse from \"./components/UpdateCourse\";\nimport CreateCourse from \"./components/CreateCourse\";\n// import EditCourseDetails from \"./components/EditCourseDetails\";\n\nimport UserSignUp from \"./components/UserSignUp\";\nimport UserSignIn from \"./components/UserSignIn\";\nimport UserSignOut from \"./components/UserSignOut\";\nimport PrivateRoute from \"./components/PrivateRoute\";\n\nimport NotFound from \"./components/NotFound\";\nimport Forbidden from \"./components/Forbidden\";\nimport UnhandledError from \"./components/UnhandledError\";\n\nimport { authSignUp, authSignIn, getAuthHeaders } from \"./bin/auth\";\n\n/* SERVER LOCATION */\n// to run on gh-pages, uncomment the below line\nconst serverLocation = \"https://jameshall-courses-rest-api.herokuapp.com\";\n// to run locally, comment the above line and uncomment the below line\n// const serverLocation = \"http://localhost:5000\";\n\nconst cookies = new Cookies();\n\nclass App extends Component {\n  state = {\n    user: {\n      authenticated: false,\n    },\n    serverLocation,\n  };\n\n  componentDidMount() {\n    // get credentials from cookies, and attempt to sign in with them\n    const emailAddress = cookies.get(\"emailAddress\");\n    const password = cookies.get(\"password\");\n    this.signIn({ emailAddress, password });\n  }\n\n  /**\n   * sign up for user account\n   */\n  signUp = async (form) => {\n    const result = await authSignUp(form, this.state.serverLocation);\n    if (result.status === 400) {\n      return result;\n    } else {\n      this.signIn(form);\n      return true;\n    }\n  };\n\n  /**\n   * sign in to existing user account\n   */\n  signIn = async (form) => {\n    const result = await authSignIn(form, this.state.serverLocation);\n    if (result) {\n      this.setState(result);\n\n      cookies.set(\"emailAddress\", form.emailAddress, { path: \"/\" });\n      cookies.set(\"password\", form.password, { path: \"/\" });\n\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  /**\n   * sign out of user account\n   */\n  signOut = () => {\n    this.setState({\n      user: {\n        authenticated: false,\n      },\n    });\n  };\n\n  /**\n   * create or update existing course\n   */\n  saveCourse = async (course, purpose) => {\n    const { emailAddress, password } = this.state.user;\n    const { title, description, estimatedTime, materialsNeeded } = course;\n    let method, url;\n\n    if (purpose === \"create\") {\n      method = \"post\";\n      url = `${this.state.serverLocation}/api/courses`;\n    } else if (purpose === \"update\") {\n      // check that user owns course\n      if (course.User.emailAddress !== emailAddress) {\n        return {\n          status: 401,\n          message: \"User does not own this course\",\n        };\n      } else {\n        method = \"put\";\n        url = `${this.state.serverLocation}/api/courses/${course.id}`;\n      }\n    }\n    try {\n      const response = await axios({\n        method,\n        url,\n        headers: getAuthHeaders(emailAddress, password),\n        data: {\n          title,\n          description,\n          estimatedTime,\n          materialsNeeded,\n        },\n      });\n      return response;\n    } catch (e) {\n      return {\n        status: 400,\n        errors: e.response.data.errors,\n      };\n    }\n    // send put/post request\n  };\n\n  render() {\n    return (\n      <HashRouter>\n        <div className=\"App\">\n          <Header user={this.state.user} />\n\n          <Switch>\n            {/* view courses */}\n            <Route\n              exact\n              path=\"/\"\n              render={() => (\n                <Courses\n                  user={this.state.user}\n                  serverLocation={this.state.serverLocation}\n                />\n              )}\n            />\n\n            {/* redirect '/courses' route to / */}\n            <Route exact path=\"/courses\" render={() => <Redirect to=\"/\" />} />\n\n            {/* create new course */}\n            <PrivateRoute\n              exact\n              path=\"/courses/create\"\n              user={this.state.user}\n              render={(props) => (\n                <CreateCourse\n                  purpose=\"create\"\n                  saveCourse={this.saveCourse}\n                  history={props.history}\n                  user={this.state.user}\n                  serverLocation={this.state.serverLocation}\n                />\n              )}\n            />\n\n            {/* view individual course details */}\n            <Route\n              exact\n              path=\"/courses/:courseId\"\n              render={(props) => (\n                <CourseDetails\n                  match={props.match}\n                  user={this.state.user}\n                  serverLocation={this.state.serverLocation}\n                />\n              )}\n            />\n\n            {/* update individual course details */}\n            <PrivateRoute\n              exact\n              path=\"/courses/:courseId/update\"\n              user={this.state.user}\n              render={(props) => (\n                <UpdateCourse\n                  match={props.match}\n                  purpose=\"update\"\n                  saveCourse={this.saveCourse}\n                  user={this.state.user}\n                  serverLocation={this.state.serverLocation}\n                />\n              )}\n            />\n\n            {/* delete individual course */}\n            <PrivateRoute\n              exact\n              path=\"/courses/:courseId/delete\"\n              user={this.state.user}\n              render={(props) => (\n                <DeleteCourse\n                  match={props.match}\n                  user={this.state.user}\n                  serverLocation={this.state.serverLocation}\n                />\n              )}\n            />\n\n            {/* sign up for a user account */}\n            <Route\n              exact\n              path=\"/signup\"\n              render={() => <UserSignUp userSignUp={this.signUp} />}\n            />\n\n            {/* sign in to an existing user account */}\n            <Route\n              exact\n              path=\"/signin\"\n              render={(props) => {\n                return (\n                  <UserSignIn\n                    userSignIn={this.signIn}\n                    history={props.history}\n                    user={this.state.user}\n                    {...props}\n                  />\n                );\n              }}\n            />\n\n            {/* sign out user */}\n            <Route\n              exact\n              path=\"/signout\"\n              render={() => (\n                <UserSignOut userSignOut={this.signOut} cookies={cookies} />\n              )}\n            />\n\n            {/* forbidden */}\n            <Route path=\"/forbidden\" component={Forbidden} />\n\n            {/*error route */}\n            <Route path=\"/error\" component={UnhandledError} />\n\n            {/*catch all other routes */}\n            <Route render={() => <NotFound />} />\n          </Switch>\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}